unit uMD5;

interface

uses IdHashMessageDigest, Classes, SysUtils;

const
    SALT = 'j5*k.9S8W6*(/OG5#1O1Dfp5z9/3U5dls5y9s6hU49Z95FQyn7ab9r5j6k3';

function MD5(const Value: string): string;
function SaltPassword(pass: string): string;

implementation

function MD5(const Value: string): string;
var
    xMD5: TIdHashMessageDigest5;
begin
    xMD5 := TIdHashMessageDigest5.Create;
    Result := Value;

    try
        Result := xMD5.HashStringAsHex(Result);
    finally
        xMD5.Free;
    end;
end;

function SaltPassword(pass: string): string;
var
    xMD5: TIdHashMessageDigest5;
    randomStr: string;
    x : integer;
begin
    xMD5 := TIdHashMessageDigest5.Create;
    Result := '';

    try
        for x := 1 to Length(pass) do
            Result := Result + Copy(SALT, x, 1) + Copy(pass, x, 1);

        Result := LowerCase(xMD5.HashStringAsHex(Result));  // 1x
        Result := LowerCase(xMD5.HashStringAsHex(Result));  // 2x
    finally
        xMD5.Free;
    end;
end;


Function Crypt(Action, Src: String): String;
Label Fim;
var KeyLen : Integer;
  KeyPos : Integer;
  OffSet : Integer;
  Dest, Key : String;
  SrcPos : Integer;
  SrcAsc : Integer;
  TmpSrcAsc : Integer;
  Range : Integer;
begin
  if (Src = '') Then
  begin
    Result:= '';
    Goto Fim;
  end;
  Key :=
'YUQL23KL23DF90WI5E1JAS467NMCXXL6JAOAUWWMCL0AOMM4A4VZYW9KHJUI2347EJHJKDF3424SKL K3LAKDJSL9RTIKJ'+
'67da645f1e932b32ca2dd47effcfc88c';
  Dest := '';
  KeyLen := Length(Key);
  KeyPos := 0;
  SrcPos := 0;
  SrcAsc := 0;
  Range := 256;
  if (Action = UpperCase('C')) then
  begin
    Randomize;
    OffSet := Random(Range);
    Dest := Format('%1.2x',[OffSet]);
    for SrcPos := 1 to Length(Src) do
    begin
      //Application.ProcessMessages;
      SrcAsc := (Ord(Src[SrcPos]) + OffSet) Mod 255;
      if KeyPos < KeyLen then KeyPos := KeyPos + 1 else KeyPos := 1;
      SrcAsc := SrcAsc Xor Ord(Key[KeyPos]);
      Dest := Dest + Format('%1.2x',[SrcAsc]);
      OffSet := SrcAsc;
    end;
  end
  Else if (Action = UpperCase('D')) then
  begin
    OffSet := StrToInt('$'+ copy(Src,1,2));
    SrcPos := 3;
  repeat
    SrcAsc := StrToInt('$'+ copy(Src,SrcPos,2));
    if (KeyPos < KeyLen) Then KeyPos := KeyPos + 1 else KeyPos := 1;
    TmpSrcAsc := SrcAsc Xor Ord(Key[KeyPos]);
    if TmpSrcAsc <= OffSet then TmpSrcAsc := 255 + TmpSrcAsc - OffSet
    else TmpSrcAsc := TmpSrcAsc - OffSet;
    Dest := Dest + Chr(TmpSrcAsc);
    OffSet := SrcAsc;
    SrcPos := SrcPos + 2;
  until (SrcPos >= Length(Src));
  end;
  Result:= Dest;
  Fim:
end;


end.
